plt.figure(figsize=(12, 6))

x_min = 0  # Set the minimum x-axis value to 0
x_max = 120  # Set the maximum x-axis value to 120

# Define the bin width
binwidth = 10

# Calculate the number of bins
bins = (x_max - x_min) // binwidth

plt.subplot(1, 2, 1)
sns.histplot(data[data['With AI'] == 'Yes']['Total Points'], color='blue', kde=True, binrange=(x_min, x_max), bins=bins)
plt.title('Distribution of total points - with treatment')
plt.xlabel('Total Points')
plt.ylabel('Frequency')
plt.legend()
plt.xlim(x_min, x_max)
plt.xticks(range(x_max, x_min - binwidth, -binwidth))  # Set x-axis ticks 10 points apart, descending

plt.subplot(1, 2, 2)
sns.histplot(data[data['With AI'] == 'No']['Total Points'], color='orange', kde=True, binrange=(x_min, x_max), bins=bins)
plt.title('Distribution of total points - without treatment')
plt.xlabel('Total Points')
plt.ylabel('Frequency')
plt.legend()
plt.xlim(x_min, x_max)
plt.xticks(range(x_max, x_min - binwidth, -binwidth))  # Set x-axis ticks 10 points apart, descending

plt.tight_layout()
plt.show()


time_with_ai = data[data['With AI'] == 'Yes']['Total_Time_Minutes']
time_without_ai = data[data['With AI'] == 'No']['Total_Time_Minutes']
points_with_ai = data[data['With AI'] == 'Yes']['Total Points']
points_without_ai = data[data['With AI'] == 'No']['Total Points']
scores_with_ai = data[data['With AI'] == 'Yes']['Unit Test']
scores_without_ai = data[data['With AI'] == 'No']['Unit Test']

#Mann Whitney U test for time
u_stat_time, p_val_time = stats.mannwhitneyu(time_with_ai, time_without_ai, alternative='two-sided')
print("Mann-Whitney U test for Time:", u_stat_time, "P-value:", p_val_time)

#Mann Whitney U test for points
u_stat_points, p_val_points = stats.mannwhitneyu(points_with_ai, points_without_ai, alternative='two-sided')
print("Mann-Whitney U test for Points:", u_stat_points, "P-value:", p_val_points)

#Mann Whitney U test for unit test
u_stat_scores, p_val_scores = stats.mannwhitneyu(scores_with_ai, scores_without_ai, alternative='two-sided')
print("Mann-Whitney U test for Unit Test Scores:", u_stat_scores, "P-value:", p_val_scores)

data_with_ai = data[data['With AI'] == 'Yes']['Grade'].dropna()
data_without_ai = data[data['With AI'] == 'No']['Grade'].dropna()

#Mann Whitney U test for grades
u_stat_grades, p_value_grades = mannwhitneyu(data_with_ai, data_without_ai, alternative='two-sided')
print("Mann-Whitney U test for grades:", u_stat_grades, "P-value:", p_value_grades)
